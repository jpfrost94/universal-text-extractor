stages:
  - test
  - build
  - deploy

variables:
  DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE/text-extractor
  DOCKER_IMAGE_TAG: $CI_COMMIT_SHORT_SHA

# Test stage
test:
  stage: test
  image: python:3.11-slim
  before_script:
    - apt-get update && apt-get install -y tesseract-ocr poppler-utils
    - pip install --upgrade pip
    - pip install -r requirements.txt
  script:
    - python -m py_compile app.py
    - python -c "import utils.database; print('Database module OK')"
    - python -c "import utils.file_handlers; print('File handlers OK')"
    - python -c "import utils.ocr_utils; print('OCR utils OK')"
  only:
    - main
    - develop
    - merge_requests

# Build Docker image
build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG .
    - docker build -t $DOCKER_IMAGE_NAME:latest .
    - docker push $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG
    - docker push $DOCKER_IMAGE_NAME:latest
  only:
    - main

# Deploy to staging
deploy_staging:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$STAGING_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $STAGING_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh $STAGING_USER@$STAGING_HOST "cd /opt/text-extractor && docker-compose pull && docker-compose up -d"
  environment:
    name: staging
    url: http://$STAGING_HOST:5000
  only:
    - main
  when: manual

# Deploy to production
deploy_production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$PRODUCTION_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan $PRODUCTION_HOST >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh $PRODUCTION_USER@$PRODUCTION_HOST "cd /opt/text-extractor && docker-compose -f docker-compose.prod.yml pull && docker-compose -f docker-compose.prod.yml up -d"
  environment:
    name: production
    url: http://$PRODUCTION_HOST:5000
  only:
    - main
  when: manual